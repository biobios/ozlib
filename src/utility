#pragma once

#include <type_traits>

namespace std{

    template <class T>
    constexpr T&& forward(typename remove_reference<T>::type& t) noexcept
    {
        return static_cast<T&&>(t);
    }

    template <class T>
    constexpr T&& forward(typename remove_reference<T>::type&& t) noexcept
    {
        static_assert(!is_lvalue_reference<T>::value, "Can not forward an rvalue as an lvalue.");
        return static_cast<T&&>(t);
    }

    template <class T>
    constexpr typename remove_reference<T>::type&& move(T&& t) noexcept
    {
        return static_cast<typename remove_reference<T>::type&&>(t);
    }

    template <class T>
    typename add_rvalue_reference<T>::type
    declval() noexcept;
}