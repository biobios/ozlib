#pragma once

#include <bits/array_traits.hpp>
#include <bits/compound_traits.hpp>
#include <bits/constructible.hpp>
#include <bits/convertible.hpp>
#include <bits/cv_traits.hpp>
#include <bits/cvref_traits.hpp>
#include <bits/decay.hpp>
#include <bits/declval.hpp>
#include <bits/fundamental_traits.hpp>
#include <bits/inheritance_traits.hpp>
#include <bits/invoke_traits.hpp>
#include <bits/reference_traits.hpp>
#include <bits/same.hpp>
#include <bits/size_t.hpp>
#include <bits/template_constants.hpp>
#include <bits/template_logics.hpp>
#include <bits/void_t.hpp>

namespace std {
using std::impl::bool_constant;
using std::impl::decay;
using std::impl::decay_t;
using std::impl::enable_if;
using std::impl::enable_if_t;
using std::impl::false_type;
using std::impl::integral_constant;
using std::impl::invoke_result;
using std::impl::invoke_result_t;
using std::impl::is_array;
using std::impl::is_array_v;
using std::impl::is_base_of;
using std::impl::is_base_of_v;
using std::impl::is_const;
using std::impl::is_const_v;
using std::impl::is_constructible;
using std::impl::is_convertible;
using std::impl::is_convertible_v;
using std::impl::is_default_constructible;
using std::impl::is_function;
using std::impl::is_function_v;
using std::impl::is_lvalue_reference;
using std::impl::is_lvalue_reference_v;
using std::impl::is_object;
using std::impl::is_object_v;
using std::impl::is_reference;
using std::impl::is_reference_v;
using std::impl::is_rvalue_reference;
using std::impl::is_rvalue_reference_v;
using std::impl::is_same;
using std::impl::is_same_v;
using std::impl::is_void;
using std::impl::is_void_v;
using std::impl::remove_cv;
using std::impl::remove_cv_t;
using std::impl::remove_cvref;
using std::impl::remove_cvref_t;
using std::impl::remove_reference;
using std::impl::remove_reference_t;
using std::impl::true_type;
using std::impl::void_t;

}  // namespace std