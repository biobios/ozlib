#pragma once

namespace std{

    template <class T, T v>
    struct integral_constant {
        static constexpr T value = v;

        using value_type = T;
        using type = integral_constant<T,v>;

        constexpr operator value_type()noexcept{return value;}
        constexpr value_type operator()() const noexcept { return value;}
    };

    template <bool B>
    using bool_constant = integral_constant<bool, B>;

    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    namespace helper{

        template <typename T> using Ref = T&;

        template <typename T>
        concept is_referenceable = requires{
            typename Ref<T>;
        };
    }

    template <class T>
    struct add_rvalue_reference {
        using type = T;
    };

    template <helper::is_referenceable T>
    struct add_rvalue_reference<T> {
        using type = T&&;
    };
}