#pragma once

namespace std{

    //forward declarations
    template <class T>
    class reference_wrapper;

    template <class...> using void_t = void;

    template <class T, T v>
    struct integral_constant {
        static constexpr T value = v;

        using value_type = T;
        using type = integral_constant<T,v>;

        constexpr operator value_type()noexcept{return value;}
        constexpr value_type operator()() const noexcept { return value;}
    };

    template <bool B>
    using bool_constant = integral_constant<bool, B>;

    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    template <bool Condition, class T = void>
    struct enable_if {};

    template <typename T>
    struct enable_if<true, T>{
        using type = T;
    };

    template <bool Condition, class T = void>
    using enable_if_t = typename enable_if<Condition, T>::type;

    template<typename T>
    struct is_void : false_type {};

    template<>
    struct is_void<void> : true_type {};

    template<typename T>
    inline constexpr bool is_void_v = is_void<T>::value;

    template <typename T>
    struct is_const : false_type {};

    template <typename T>
    struct is_const<const T> : true_type {};

    template <typename T>
    inline constexpr bool is_const_v = is_const<T>::value;

    template <typename T>
    struct is_function : bool_constant<!is_const_v<const T>>{};

    template <typename T>
    struct is_function<T&> : public false_type {};

    template <typename T>
    struct is_function<T&&> : public false_type {};

    template <typename T>
    inline constexpr bool is_function_v = is_function<T>::value;

    template <class T>
    struct is_lvalue_reference : false_type {};

    template <class T>
    struct is_lvalue_reference<T&> : true_type {};

    template <class T>
    inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template <class T>
    struct is_rvalue_reference : false_type {};

    template <class T>
    struct is_rvalue_reference<T&&> : true_type {};

    template <class T>
    inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

    template <class T>
    struct is_reference : bool_constant<is_lvalue_reference_v<T> || is_rvalue_reference_v<T>> {};

    template <class T>
    inline constexpr bool is_reference_v = is_reference<T>::value;

    template <class T>
    struct is_object : bool_constant<!is_function_v<T> && !is_reference_v<T> && !is_void_v<T>> {};

    template <class T>
    inline constexpr bool is_object_v = is_object<T>::value;

    template <class T, class U>
    struct is_same : false_type {};

    template <class T>
    struct is_same<T, T> : true_type {};

    template <class T, class U>
    inline constexpr bool is_same_v = is_same<T, U>::value;

    template <typename T>
    struct remove_reference {
        using type = T;
    };

    template <typename T>
    struct remove_reference<T&> {
        using type = T;
    };

    template <typename T>
    struct remove_reference<T&&> {
        using type = T;
    };

    template <typename T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <typename T>
    struct remove_cv {
        using type = T;
    };

    template <typename T>
    struct remove_cv<const T> {
        using type = T;
    };

    template <typename T>
    struct remove_cv<volatile T> {
        using type = T;
    };

    template <typename T>
    struct remove_cv<const volatile T> {
        using type = T;
    };

    template <typename T>
    using remove_cv_t = typename remove_cv<T>::type;

    template <typename T>
    struct remove_cvref {
        using type = remove_cv_t<remove_reference_t<T>>;
    };
    
    template <typename T>
    using remove_cvref_t = typename remove_cvref<T>::type;

    namespace helper{


        template <typename T> using Ref = T&;

        template <typename T>
        concept is_referenceable = requires{
            typename Ref<T>;
        };
    }

    template <class T>
    struct add_rvalue_reference {
        using type = T;
    };

    template <helper::is_referenceable T>
    struct add_rvalue_reference<T> {
        using type = T&&;
    };

    namespace helper{
        template <class T>
        typename add_rvalue_reference<T>::type
        declval() noexcept;
    }

#ifdef __GNUC__
    template <typename Base, typename Derived>
    struct is_base_of : bool_constant<__is_base_of(Base, Derived)> {};
#else

    namespace helper{

        template <typename Base, typename Derived, typename = void>
        struct is_base_of_impl : false_type {};

        template <typename Base, typename Derived>
        struct is_base_of_impl<Base, Derived, void_t<decltype(static_cast<remove_cv_t<Base>*>(declval<remove_cv_t<Derived>*>()))>>
            : true_type {};
    }

    template <typename Base, typename Derived>
    struct is_base_of : helper::is_base_of_impl<Base, Derived> {};
#endif

    template <typename Base, typename Derived>
    inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;

    namespace helper{
        template <typename VOID, typename T, typename... Args>
        struct invoke_result_impl {
            using type = decltype(helper::declval<T>()(helper::declval<Args>()...));
        };

        template <typename Ret, typename T>
        struct invoke_result_impl<void, Ret (T::*), T*>{
            using type = decltype(*(helper::declval<T*>()).*(helper::declval<Ret (T::*)>));
        };

        template <typename Ret, typename T, typename Arg>
        struct invoke_result_impl<enable_if_t<is_same_v<reference_wrapper<T>,remove_cvref_t<Arg>> && !is_function_v<Ret>>, Ret (T::*), Arg>{
            using type = decltype((helper::declval<Arg>.get()).*(helper::declval<Ret (T::*)>()));
        };

        template <typename Ret, typename T, typename Arg>
        struct invoke_result_impl<enable_if_t<is_base_of_v<T, remove_cvref_t<Arg>> && !is_function_v<Ret>>, Ret (T::*), Arg>{
            using type = decltype((helper::declval<Arg>()).*(helper::declval<Ret (T::*)>()));
        };
        
        template <typename Ret, typename T, typename T1, typename... Args>
        struct invoke_result_impl<enable_if_t<!is_same_v<reference_wrapper<T>,remove_cvref_t<T1>> && !is_base_of_v<T, remove_cvref_t<T1>>>, Ret (T::*)(Args...), T1, Args...>{
            using type = decltype((*helper::declval<T1>()).*(helper::declval<Ret (T::*)(Args...)>(helper::declval<Args>()...)));
        };

        template <typename Ret, typename T, typename T1, typename... Args>
        struct invoke_result_impl<enable_if_t<is_same_v<reference_wrapper<T>,remove_cvref_t<T1>>>, Ret (T::*)(Args...), T1, Args...>{
            using type = decltype(((helper::declval<T1>.get()).*declval<Ret (T::*)(Args...)>())(helper::declval<Args>()...));
        };

        template <typename Ret, typename T, typename T1, typename... Args>
        struct invoke_result_impl<enable_if_t<is_base_of_v<T, remove_cvref_t<T1>>>, Ret (T::*)(Args...), T1, Args...>{
            using type = decltype(((helper::declval<T1>()).*declval<Ret (T::*)(Args...)>())(helper::declval<Args>()...));
        };
    }

    template <typename T, typename... Args>
    struct invoke_result : helper::invoke_result_impl<void, T, Args...> {};

    template <typename T, typename... Args>
    using invoke_result_t = typename invoke_result<T, Args...>::type;

}