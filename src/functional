#pragma once

#include <bits/function.hpp>
#include <cstdint>
#include <memory>
#include <type_traits>
#include <utility>

namespace std {
using std::impl::function;

namespace helper {

struct invoke_other {};
struct invoke_memobj_ptr {};
struct invoke_memobj_refwrap {};
struct invoke_memobj_ref {};
struct invoke_memfun_ptr {};
struct invoke_memfun_refwrap {};
struct invoke_memfun_ref {};

template <typename VOID, typename T, typename... Args>
struct invoke_type {
    using type = invoke_other;
};

template <typename Ret, typename T>
struct invoke_type<void, Ret(T::*), T*> {
    using type = invoke_memobj_ptr;
};

template <typename Ret, typename T, typename Arg>
struct invoke_type<
    enable_if_t<is_same_v<reference_wrapper<T>, remove_cvref_t<Arg>> &&
                !is_function_v<Ret>>,
    Ret(T::*), Arg> {
    using type = invoke_memobj_refwrap;
};

template <typename Ret, typename T, typename Arg>
struct invoke_type<
    enable_if_t<is_base_of_v<T, remove_cvref_t<Arg>> && !is_function_v<Ret>>,
    Ret(T::*), Arg> {
    using type = invoke_memobj_ref;
};

template <typename Ret, typename T, typename T1, typename... Args>
struct invoke_type<
    enable_if_t<!is_same_v<reference_wrapper<T>, remove_cvref_t<T1>> &&
                !is_base_of_v<T, remove_cvref_t<T1>>>,
    Ret (T::*)(Args...), T1, Args...> {
    using type = invoke_memfun_ptr;
};

template <typename Ret, typename T, typename T1, typename... Args>
struct invoke_type<
    enable_if_t<is_same_v<reference_wrapper<T>, remove_cvref_t<T1>>>,
    Ret (T::*)(Args...), T1, Args...> {
    using type = invoke_memfun_refwrap;
};

template <typename Ret, typename T, typename T1, typename... Args>
struct invoke_type<enable_if_t<is_base_of_v<T, remove_cvref_t<T1>>>,
                   Ret (T::*)(Args...), T1, Args...> {
    using type = invoke_memfun_ref;
};
}  // namespace helper

namespace helper {

template <typename Res, typename Fn, typename... Args>
constexpr Res invoke_impl(helper::invoke_other, Fn&& f, Args&&... args) {
    return std::forward<Fn>(f)(std::forward<Args>(args)...);
}

template <typename Res, typename MemObjPtr, typename T>
constexpr Res invoke_impl(helper::invoke_memobj_ptr, MemObjPtr&& f, T&& t) {
    return (*std::forward<T>(t).*f);
}

template <typename Res, typename MemObjPtr, typename RefWrap>
constexpr Res invoke_impl(helper::invoke_memobj_refwrap, MemObjPtr&& f,
                          RefWrap&& t) {
    return (t.get().*f);
}

template <typename Res, typename MemObjPtr, typename T>
constexpr Res invoke_impl(helper::invoke_memobj_ref, MemObjPtr&& f, T&& t) {
    return (std::forward<T>(t).*f);
}

template <typename Res, typename MemFunPtr, typename T, typename... Args>
constexpr Res invoke_impl(helper::invoke_memfun_ptr, MemFunPtr&& f, T&& t,
                          Args&&... args) {
    return (*std::forward<T>(t).*f)(std::forward<Args>(args)...);
}

template <typename Res, typename MemFunPtr, typename RefWrap, typename... Args>
constexpr Res invoke_impl(helper::invoke_memfun_refwrap, MemFunPtr&& f,
                          RefWrap&& t, Args&&... args) {
    return (t.get().*f)(std::forward<Args>(args)...);
}

template <typename Res, typename MemFunPtr, typename T, typename... Args>
constexpr Res invoke_impl(helper::invoke_memfun_ref, MemFunPtr&& f, T&& t,
                          Args&&... args) {
    return (std::forward<T>(t).*f)(std::forward<Args>(args)...);
}

template <typename Callable, typename... Args>
constexpr invoke_result_t<Callable, Args...> invoke(Callable&& f,
                                                    Args&&... args) {
    return helper::invoke_impl<invoke_result_t<Callable, Args...>>(
        typename helper::invoke_type<void, Callable, Args...>::type{},
        std::forward<Callable>(f), std::forward<Args>(args)...);
}
}  // namespace helper

template <typename Callable, typename... Args>
inline constexpr invoke_result_t<Callable, Args...> invoke(Callable&& f,
                                                           Args&&... args) {
    return helper::invoke(std::forward<Callable>(f),
                          std::forward<Args>(args)...);
}

template <class T>
class reference_wrapper {
    // トリビアルコピー可能である
    T* ptr;

    static constexpr T* _S_fun(T& t) noexcept { return addressof(t); }

    static void _S_fun(T&&) = delete;

   public:
    using type = T;

    template <
        class U,
        class = enable_if<!is_same_v<reference_wrapper, remove_cvref_t<U>>>,
        class = decltype(reference_wrapper::_S_fun(std::declval<U>()))>
    constexpr reference_wrapper(U&& u) noexcept(
        noexcept(reference_wrapper::_S_fun(std::declval<U>())))
        : ptr(reference_wrapper::_S_fun(std::forward<U>(u))) {}

    constexpr reference_wrapper(const reference_wrapper& x) noexcept = default;
    ~reference_wrapper() noexcept = default;

    constexpr reference_wrapper& operator=(
        const reference_wrapper& x) noexcept = default;
    constexpr T& get() const noexcept { return *ptr; }

    constexpr operator T&() const noexcept { return *ptr; }

    template <class... ArgTypes>
    constexpr invoke_result_t<T&, ArgTypes&&...> operator()(
        ArgTypes&&... args) const {
        if constexpr (is_object_v<T>)
            static_assert(sizeof(T), "type must be complete");
        return invoke(get(), forward<ArgTypes>(args)...);
    }
};

}  // namespace std