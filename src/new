#pragma once

#include <cstddef>

namespace std {
enum class align_val_t : std::size_t {};
struct nothrow_t {};
extern const nothrow_t nothrow;
struct destroying_delete_t {
    explicit destroying_delete_t() = default;
};

inline constexpr destroying_delete_t destroying_delete{};

}

[[nodiscard]] void* operator new(std::size_t size);
[[nodiscard]] void* operator new(std::size_t size, std::align_val_t alignment);
[[nodiscard]] void* operator new(std::size_t size, const std::nothrow_t&)noexcept;
[[nodiscard]] void* operator new(std::size_t size, std::align_val_t alignment, const std::nothrow_t&)noexcept;
[[nodiscard]] void* operator new(std::size_t size, void* ptr)noexcept;

void operator delete(void* ptr) noexcept;//1
void operator delete(void* ptr, std::size_t size)noexcept;//2
void operator delete(void* ptr, std::align_val_t alignment)noexcept;//3
void operator delete(void* ptr, std::size_t size, std::align_val_t alignment)noexcept;//4
void operator delete(void* ptr, const std::nothrow_t&)noexcept;//5
void operator delete(void* ptr, std::align_val_t alignment, const std::nothrow_t&) noexcept;//6
void operator delete(void* ptr, void*)noexcept;//7