#pragma once

#include <bits/default_delete.hpp>
#include <bits/unique_ptr.hpp>

namespace std {

using std::impl::default_delete;
using std::impl::unique_ptr;

template <class T>
constexpr T* addressof(T& r) noexcept {
    return reinterpret_cast<T*>(
        &const_cast<char&>(reinterpret_cast<const volatile char&>(r)));
}

template <class T>
const T* addressof(const T&&) = delete;

}  // namespace std